name: 1.0.$(BuildID)$(Rev:.r)-$(SourceBranchName)
  
pool:
  vmImage: windows-2022

parameters:
  - name: runSonar
    displayName: Rodar Sonar
    type: boolean
    default: false

  - name: runDependencyCheck
    displayName: Rodar Dependency Check
    type: boolean
    default: false

  - name: runPublish
    displayName: Publicar
    type: boolean
    default: true

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  runDependencyCheck: ${{ parameters.runDependencyCheck }}
  runSonar: ${{ parameters.runSonar }}
  runPublish: ${{ parameters.runPublish }}

steps:
  - task: PowerShell@2
    condition: eq(variables.runDependencyCheck, 'true')
    displayName: Dependency Check (Site)
    inputs:
      targetType: 'inline'
      script: |
        Invoke-RestMethod -Uri 'https://github.com/jeremylong/DependencyCheck/releases/download/v6.5.3/dependency-check-6.5.3-release.zip' -OutFile .\dependency-check.zip
        Expand-Archive .\dependency-check.zip -DestinationPath .\
        .\dependency-check\bin\dependency-check.bat -s .\Site --disableYarnAudit -project "Cashflow Site"  --format "HTML" --out "$(Build.ArtifactStagingDirectory)/report-site.html"
  - task: PowerShell@2
    condition: and(succeeded(), eq(variables.runDependencyCheck, 'true'))
    displayName: Dependency Check (Api)
    inputs:
      targetType: 'inline'
      script: |
        .\dependency-check\bin\dependency-check.bat -s .\Api --disableYarnAudit -project "Cashflow Api"  --format "HTML" --out "$(Build.ArtifactStagingDirectory)/report-api.html"
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    condition: and(succeeded(), eq(variables.runDependencyCheck, 'true'))
    inputs:
      pathToPublish: "$(Build.ArtifactStagingDirectory)"
      artifactName: Dependency Check Reports

  - task: SonarCloudPrepare@1
    displayName: Prepare analysis on SonarCloud
    condition: eq(variables.runSonar, 'true')
    inputs:
      SonarCloud: 'Cashflow'
      organization: 'sgtux'
      scannerMode: 'MSBuild'
      projectKey: 'Cashflow'
      projectName: 'Cashflow'

  - task: DotNetCoreCLI@2
    displayName: Dotnet Build
    inputs:
      command: 'build'
      projects: 'Cashflow.sln'
      arguments: '--configuration $(BuildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: Dotnet Test
    inputs:
      command: 'test'
      projects: '**/*[Tt]ests/*.csproj'
      arguments: '--logger trx --results-directory ./coverage --collect:"XPlat Code Coverage"'
      publishTestResults: false

  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '$(System.DefaultWorkingDirectory)/coverage/*.trx'
  
  - task: PublishCodeCoverageResults@1
    displayName: Publish Code Coverage
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/**/coverage.cobertura.xml'

  - task: SonarCloudAnalyze@1
    condition: and(succeeded(), eq(variables.runSonar, 'true'))
    displayName: Run Sonar Code Analysis

  - task: SonarCloudPublish@1
    condition: and(succeeded(), eq(variables.runSonar, 'true'))
    displayName: Publish Quality Gate Result
    inputs:
      pollingTimeoutSec: '300'

  - task: Yarn@3
    condition: eq(variables['Build.SourceBranchName'], 'main')
    displayName: Yarn Install
    inputs:
      projectDirectory: 'Site'

  - task: Yarn@3
    condition: eq(variables['Build.SourceBranchName'], 'main')
    displayName: Yarn Build
    inputs:
      projectDirectory: 'Site'
      arguments: 'build:prod'

  - task: DotNetCoreCLI@2
    condition: and(and(succeeded(), eq(variables.runPublish, 'true')), eq(variables['Build.SourceBranchName'], 'main'))
    displayName: DB Migrations
    inputs:
      command: 'run'
      projects: 'Migrations'

  - task: Bash@3
    condition: and(and(succeeded(), eq(variables.runPublish, 'true')), eq(variables['Build.SourceBranchName'], 'main'))
    displayName: Publish to Heroku
    inputs:
      filePath: 'heroku-deploy.sh'